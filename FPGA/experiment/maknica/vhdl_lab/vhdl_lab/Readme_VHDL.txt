Readme_VHDL

これらのファイルは、「VHDL 入門編トライアル・コース」で実施している演習のデータです。
また、Web ページで公開している「はじめてみよう！テストベンチ」のサンプルとしても提供しています。

演習を実施するには、例えば演習①（Lab1）の場合は lab1 フォルダを作業フォルダにしてデザインを VHDL で記述し、シミュレーションで動作を確認してください。
シミュレーションに用いるテストベンチは、用意されています。

Solution フォルダ下には、各演習のサンプル記述が用意されていますので、参考にしてください。


演習①（Lab1）

<目的>
・記述の穴埋めをし、加算器を完成させます。

・エンティティ名：adder
・入力ポート：a (16bit), b (16bit)
・出力ポート：sum (16bit)
・データ・タイプ：std_logic_vector
・機能：16ビット加算器


演習②（Lab2）

<目的>
・when-else 文で比較器を作成します。

・エンティティ名：compare
・入力ポート：da (8bit), db (8bit)
・出力ポート：equ, agb, alb (1bit)
・データ・タイプ：std_logic, std_logic_vector
・機能：比較器

<動作条件>
入力信号 da と db を比較します。
・da と db が等しい場合は、equ は High (1) を出力し、それ以外のときは Low (0) を出力
・da が大きい場合は、agb は High (1) を出力し、それ以外のときは Low (0) を出力
・db が大きい場合は、alb は High (1) を出力し、それ以外のときは Low (0) を出力


演習③（Lab3）

<目的>
・process 文で乗算器を作成します。

・エンティティ名：mult4x4
・入力ポート：a (4bit), b (4bit)
・出力ポート：product (8bit)
・データ・タイプ：std_logic_vector
・機能：4x4bit 乗算器


演習④（Lab4）

<目的>
・演習②の比較器を if-else 文で作成します。

・エンティティ名：compare_if
・入力ポート：da (8bit), db (8bit)
・出力ポート：equ, agb, alb (1bit)
・データ・タイプ：std_logic, std_logic_vector
・機能：比較器

<動作条件>
入力信号 da と db を比較します。
・da と db が等しい場合は、equ は High (1) を出力し、それ以外のときは Low (0) を出力
・da が大きい場合は、agb は High (1) を出力し、それ以外のときは Low (0) を出力
・db が大きい場合は、alb は High (1) を出力し、それ以外のときは Low (0) を出力


演習⑤（Lab5）

<目的>
・case 文を使用し、マルチプレクサを作成します。

・エンティティ名：mux4
・入力ポート：a (4bit), b (4bit), sel (1bit)
・出力ポート：y (4bit)
・データ・タイプ：std_logic, std_logic_vector
・機能：2 to 1 マルチプレクサ

<動作条件>
・セレクト・コントロール信号 (sel) が Low (0) ならば a[3..0] を出力
・セレクト・コントロール信号 (sel) が High (1) ならば b[3..0] を出力


演習⑥（Lab6）

<目的>
・非同期クリア&クロック・イネーブル付きフリップフロップを作成します。

・エンティティ名：ff
・入力ポート：clk (1bit), aclr (1bit), clken (1bit)
・入力ポート：d (1bit)
・出力ポート：q (1bit)
・データ・タイプ：std_logic
・機能：非同期クリア&クロック・イネーブル付きフリップフロップ

<動作条件>
・クリア信号 (aclr) が Low (0) のとき、フリップフロップは Low (0) を出力する（クリアされる）
・クリア信号 (aclr) が High (1)、且つクロック・イネーブル信号 (clken) が High (1) のとき、出力 q は 入力 d を出力する

